<launch>
  <arg name="namespace" default="/pandora_vision/pandora_vision_obstacle" />

  <include file="$(find state_manager)/launch/stateManager.launch" />

  <arg name="openni" default="false" />

  <group if="$(arg openni)">
    <include file="$(find openni_launch)/launch/openni.launch" >
      <arg name="camera" value="kinect"/>
      <arg name="depth_registration" value="true" />
      <arg name="publish_tf" value="false" />
    </include>
  </group>

  <arg name="openni2" default="false" />

  <group if="$(arg openni2)">
    <include file="$(find openni2_launch)/launch/openni2.launch" >
      <arg name="camera" value="kinect"/>
      <arg name="depth_registration" value="true" />
      <arg name="publish_tf" value="false" />
    </include>
  </group>

  If the source is not a physical device, it is a bag: play "path" bag
  <group unless="$(arg openni2)">
    <group unless="$(arg openni)">
      <arg name="path" default="$(find pandora_vision_obstacle)/barrel2.bag" />
      <node pkg="rosbag" type="play" name="player" output="screen" args= "--clock -l $(arg path)" />
    </group>
  </group>

  <param name="/kinect_rgb_optical_frame/hfov" value="58.0" />
  <param name="/kinect_rgb_optical_frame/vfov" value="45.0" />

  <include file="$(find pandora_robots_description)/gio/launch/gio_description.launch" />

  <include file="$(find pandora_vision_obstacle)/launch/pandora_vision_barrel.launch"
      ns="$(arg namespace)" />
  <group ns="/pandora_vision/pandora_vision_hole" >
    <param name="thermal_mode" value="false" />
    <param name="rgbdt_mode" value="false" />
    <param name="rgbd_mode" value="true" />
    <include file="$(find pandora_vision_hole)/launch/synchronizer/pandora_pc_thermal_synchronizer.launch"
        ns="/pandora_vision/pandora_vision_hole" />
  </group>

</launch>

<launch>

  <!-- ======================= Launchers depended on ======================= -->

  <!--State manager and changer -->
  <include file="$(find state_manager)/launch/stateManager.launch" />


  <!-- =========================== The namespace =========================== -->

  <arg name="namespace" default="pandora_vision/hole_detector" />


  <!-- ========================== Source selection ========================= -->

  <!-- Kinect: choose the openni driver -->
  <arg name="openni" default="false" />

  <group if="$(arg openni)">
    <include file="$(find openni_launch)/launch/openni.launch">
      <arg name="device_id" value="#1" />
      <arg name="camera" value="kinect" />
      <arg name="depth_registration" value="true"/>
    </include>
  </group>


  <!-- Xtion: choose the openni2 driver -->
  <arg name="openni2" default="true" />

  <group if="$(arg openni2)">
    <include file="$(find openni2_launch)/launch/openni2.launch">
      <arg name="device_id" value="#1" />
      <arg name="camera" value="kinect" />
      <arg name="depth_registration" value="true"/>
    </include>
  </group>


  <!-- If the source is not a physical device, it is a bag: play "path" bag -->
  <group unless="$(arg openni)">
    <group unless="$(arg openni2)">

      <arg name="path" default="$(find pandora_vision_hole)/test/functional/bag1.bag" />

      <node pkg="rosbag" type="play" name="player" output="screen" args="--clock -l $(arg path)" >
        <remap from="/camera/depth_registered/points" to="/kinect/depth_registered/points" />
      </node>

    </group>
  </group>
  
  <param name="/kinect_rgb_optical_frame/hfov" value="58.0" />
  <param name="/kinect_rgb_optical_frame/vfov" value="45.0" />

  <!-- Output selection -->
  <arg name="output" default="screen" />


  <!-- ========================= Synchronizer node ========================= -->

  <node
    name="synchronizer_node"
    type="synchronizer_node"
    pkg="pandora_vision_hole"
    respawn="False"
    output="$(arg output)"
    ns="$(arg namespace)">

    <!-- The width and height variables needed when in simulation mode -->
    <param name="width" value="640" />
    <param name="height" value="480" />

    <rosparam file="$(find pandora_vision_hole)/cfg/synchronizer_node_topics.yaml"
              command="load" />
  </node>

  <!-- ======================= RGBDT Synchronizer node ===================== -->
  
  <node name="rgb_depth_thermal_synchronizer_node"
        type="rgb_depth_thermal_synchronizer.py"
        pkg="pandora_vision_hole"
        respawn="false"
        output="$(arg output)"
        ns="$(arg namespace)">
        
    <rosparam file="$(find pandora_vision_hole)/cfg/synchronizer_node_topics.yaml"
              command="load" />

  </node>

  <!-- ============================ Depth node ============================= -->

  <node
    name="depth_node"
    type="depth_node"
    pkg="pandora_vision_hole"
    respawn="False"
    output="$(arg output)"
    ns="$(arg namespace)">

    <rosparam file="$(find pandora_vision_hole)/cfg/depth_node_topics.yaml"
              command="load" />
  </node>


  <!-- ============================= RGB node ============================== -->

  <node
    name="rgb_node"
    type="rgb_node"
    pkg="pandora_vision_hole"
    respawn="False"
    output="$(arg output)"
    ns="$(arg namespace)">

    <rosparam file="$(find pandora_vision_hole)/cfg/rgb_node_topics.yaml"
              command="load" />
  </node>

  <!-- =========================== Thermal node ============================ -->
  <node
    name="thermal_camera_node"
    type="thermal_camera_node"
    pkg="pandora_vision_hole"
    respawn="False"
    output="$(arg output)"
    ns="$(arg namespace)">

    <rosparam file="$(find pandora_vision_hole)/cfg/thermal_node_topics.yaml"
    command="load" />

    <rosparam file="$(find pandora_vision_hole)/cfg/thermal_node_matching_variables.yaml"
    command="load" />    

  </node>

  <!-- ========================= Hole Fusion node ========================== -->   

  <node
    name="hole_fusion_node"
    type="hole_fusion_node"
    pkg="pandora_vision_hole"
    respawn="False"
    output="$(arg output)"
    ns="$(arg namespace)">

    <rosparam file="$(find pandora_vision_hole)/cfg/hole_fusion_node_topics.yaml"
              command="load" />
  </node> 
        
</launch>

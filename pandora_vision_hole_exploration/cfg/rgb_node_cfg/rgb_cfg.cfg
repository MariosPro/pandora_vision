#!/usr/bin/env python
# Kinect configuration

PACKAGE = 'pandora_vision_hole_exploration'

from dynamic_reconfigure.parameter_generator_catkin import *

gen = ParameterGenerator()

# Example : gen.add("int_param", int_t, 0,    "An In.....", 50, 0,  100)
#                    name        type   level  description  def min max

#---------------- show input images and initially processed -----------

gen.add("show_rgb_image", bool_t, 0,"", False)
gen.add("show_std_variance_image", bool_t, 0,"", False)

##-------------------------- Edge detection method ------------------------------
#dirm = gen.enum([
#  gen.const("Canny_edge_detector", int_t, 0,""),
#  gen.const("Scharr_edge_detector", int_t, 1,""),
#  gen.const("Sobel_edge_detector", int_t, 2,""),
#  gen.const("Laplacian_edge_detector", int_t, 3,""),
#  gen.const("Mixed_edge_detector", int_t, 4,"")], "")
#
#gen.add("edge_detection_method", int_t, 0, "", 1, 0, 4, edit_method=dirm)
#
##------------------------Threshold parameters------------------------
#gen.add("denoised_edges_threshold", int_t, 0,"", 80, 0, 255)
#
##----------------------------- Canny parameters --------------------------------
#gen.add("canny_ratio", int_t, 0,"", 3, 0, 10)
#gen.add("canny_kernel_size", int_t, 0,"", 3, 1, 10)
#gen.add("canny_low_threshold", int_t, 0,"", 40, 1, 255)
#gen.add("canny_blur_noise_kernel_size", int_t, 0,"", 3, 1, 10)
#
#gen.add("contrast_enhance_beta", int_t, 0,"", 2, 1, 10)
#gen.add("contrast_enhance_alpha", int_t, 0,"", 2, 1, 10)
#
##--------------------------- Blob detection parameters -------------------------
#
#gen.add("min_threshold", int_t, 0,"", 0, 0, 5000)
#gen.add("max_threshold", int_t, 0,"", 200, 0, 5000)
#gen.add("threshold_step", int_t, 0,"", 100, 1, 100)
#gen.add("min_area", int_t, 0,"", 1000, 1, 1000000)
#gen.add("max_area", int_t, 0,"", 181000, 1, 307200)
#gen.add("min_convexity", double_t, 0,"", 0.0, 0.0, 100.0)
#gen.add("max_convexity", double_t, 0,"", 100.0, 0.0, 100.0)
#gen.add("min_inertia_ratio", double_t, 0,"", 0.0, 0.0, 100.0)
#gen.add("max_circularity", double_t, 0,"", 1.0, 0.0, 1.0)
#gen.add("min_circularity", double_t, 0,"", 0.3, 0.0, 1.0)
#gen.add("filter_by_color", bool_t, 0,"", False)
#gen.add("filter_by_circularity", bool_t, 0,"", True)
#
##------------------------ Bounding boxes parameters ----------------------------
#odm = gen.enum([
#  gen.const("Brushfire_bounding_box_detection", int_t, 0,""),
#  gen.const("Raycast_bounding_box_detection", int_t, 1,"")],
#   "")
#
#gen.add("outline_detection_method", int_t, 0, "", 1, 0, 1, edit_method=odm)
#gen.add("raycast_keypoint_partitions", int_t, 0, "", 32, 0, 128)
#
##------------------------ Loose ends connection parameters ---------------------
#
#gen.add("AB_to_MO_ratio", int_t, 0, "", 4, 0, 10)
#gen.add("minimum_curve_points", int_t, 0, "", 50, 0, 1000)
#
##------------------------ Interpolation  parameters ----------------------------
#gen.add("scale_method", int_t, 0, "", 0, 0, 1)
#
##-------------------------- Histogram calculation ------------------------------
#gen.add("number_of_hue_bins", int_t, 0,"", 30, 0, 179)
#gen.add("number_of_saturation_bins", int_t, 0,"", 32, 0, 255)
#gen.add("number_of_value_bins", int_t, 0,"", 30, 0, 255)
#gen.add("secondary_channel", int_t, 0,"", 2, 1, 2)
#
##---------------------- RGB image segmentation parameters ----------------------
#reem = gen.enum([
#  gen.const("via_segmentation", int_t, 0,""),
#  gen.const("via_backprojection", int_t, 1,"") ],"")
#
#gen.add("edges_extraction_method", int_t, 0,"", 0, 0, 1, edit_method=reem)
#
#gen.add("backprojection_threshold", int_t, 0,"", 128, 0, 255)
#gen.add("spatial_window_radius", int_t, 0,"", 13, 1, 180)
#gen.add("color_window_radius", int_t, 0,"", 40, 1, 180)
#gen.add("maximum_level_pyramid_segmentation", int_t, 0,"", 2, 0, 4)
#gen.add("term_criteria_max_iterations", int_t, 0,"", 5, 1, 10)
#gen.add("term_criteria_max_epsilon", double_t, 0,"", 1.0, 0.1, 4.0)
#
#gen.add("posterize_after_segmentation", bool_t, 0,"", False)
#
#gen.add("floodfill_lower_colour_difference", int_t, 0,"", 1, 1, 6)
#gen.add("floodfill_upper_colour_difference", int_t, 0,"", 2, 1, 6)
#gen.add("watershed_foreground_dilation_factor", int_t, 0,"", 3, 1, 20)
#gen.add("watershed_foreground_erosion_factor", int_t, 0,"", 5, 1, 20)
#gen.add("watershed_background_dilation_factor", int_t, 0,"", 3, 1, 20)
#gen.add("watershed_background_erosion_factor", int_t, 0,"", 5, 1, 20)

#-------------------------------- Std variance, morphology extraction, holes validation thresholds, holes merging thresholds. ----------------------------------------

gen.add("original_image_gaussian_blur", int_t, 0,"", 3, 1, 8)
gen.add("std_variance_kernel_size", int_t, 0,"", 5, 1, 10)
gen.add("std_variance_threshold", int_t, 0,"", 32, 0, 255)
gen.add("std_variance_morphology_close_size", int_t, 0,"", 8, 2, 60)
gen.add("std_variance_morphology_open_size", int_t, 0,"", 8, 2, 60)
gen.add("contour_erode_kernel_size", int_t, 0,"", 4, 2, 60)
gen.add("lower_contour_number_to_test_huge", int_t, 0,"", 2, 1, 20)
gen.add("huge_contour_thresh", int_t, 0,"", 20000, 100, 60000)
gen.add("tiny_contour_thresh", int_t, 0,"", 500, 10, 3000)
gen.add("border_thresh", int_t, 0,"", 20, 2, 100)
gen.add("small_contour_thresh", int_t, 0,"", 100, 10, 200)
gen.add("neighbor_thresh", int_t, 0,"", 100, 10, 400)
gen.add("homog_rect_dims_thresh", int_t, 0,"", 50, 10, 400)
gen.add("neighbor_value_thresh", int_t, 0,"", 50, 10, 200)
gen.add("homogenity_thresh", double_t, 0,"", 0.5, 0.1, 1.0)
gen.add("neighbor_tiny_distance_thresh", int_t, 0,"", 50, 10, 100)
gen.add("rect_diff_thresh", int_t, 0,"", 3, 1, 100)
gen.add("shape_validation", int_t, 0,"", 0, 0, 1)
gen.add("one_direction_rectangle_contour_overlap_thresh", double_t, 0,"", 40.0, 1.0, 100.0)
gen.add("max_intersections_thresh", int_t, 0,"", 4, 2, 12)
gen.add("intersections_mean_cost", double_t, 0,"", 0.3, 0.0, 1.0)
gen.add("unclosed_contour_punishment", double_t, 0,"", 1.0, 0.0, 10.0)
gen.add("intersections_stddev_cost", double_t, 0,"", 0.3, 0.0, 1.0)
gen.add("internal_pixels_2d_mean_cost", double_t, 0,"", 0.2, 0.0, 1.0)
gen.add("internal_pixels_2d_stddev_cost", double_t, 0,"", 0.2, 0.0, 1.0)
gen.add("shape_validity_thresh", double_t, 0,"", 1.1, 0.0, 10.0)

#-------------------------------- Debug ----------------------------------------

gen.add("show_find_holes", bool_t, 0,"", False)
gen.add("show_find_holes_size", int_t, 0,"", 1200, 0, 3000)
#
#gen.add("show_produce_edges", bool_t, 0,"", False)
#gen.add("show_produce_edges_size", int_t, 0,"", 1200, 0, 3000)
#
#gen.add("show_denoise_edges", bool_t, 0,"", False)
#gen.add("show_denoise_edges_size", int_t, 0,"", 1200, 0, 3000)
#
#gen.add("show_connect_pairs", bool_t, 0,"", False)
#gen.add("show_connect_pairs_size", int_t, 0,"", 1200, 0, 3000)
#
#gen.add("show_get_shapes_clear_border", bool_t, 0,"", False)
#gen.add("show_get_shapes_clear_border_size", int_t, 0,"", 1200, 0, 3000)


exit(gen.generate(PACKAGE, "rgb_node", "rgb_cfg"))
